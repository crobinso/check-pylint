#!/usr/bin/env python3
#
# This work is licensed under the terms of the GNU GPL, version 2 or later.
# See the COPYING file in the top-level directory.

import argparse
import os
import pprint
import logging
import re
import shutil
import subprocess
import sys

QUIET = False


log = logging.getLogger("check-pylint")
_fmt = "%(levelname)s (%(module)s:%(lineno)d) %(message)s"
_handler = logging.StreamHandler(sys.stderr)
_handler.setFormatter(logging.Formatter(_fmt))
log.addHandler(_handler)
log.setLevel(logging.ERROR)


def p(*args, **kwargs):
    if QUIET:
        return
    print(*args, **kwargs)


def find_python_files():
    """
    Search under cwd for all python files.
    """
    modules = []
    scripts = []

    def _check(root):
        if os.path.basename(root) in [".git", "__pycache__", ".tox"]:
            return []
        files = [os.path.join(root, f) for f in os.listdir(root)]
        ret = [f for f in files if os.path.isdir(f)]
        files = [f for f in files if f not in dirs]

        if "__init__.py" in files:
            modules.append(root)
            return ret

        for filename in files:
            if os.path.islink(filename):
                continue
            if filename.endswith(",cover"):
                continue
            out = subprocess.check_output(["/usr/bin/file", filename])
            if "Python script" in out.decode("utf-8"):
                scripts.append(filename)
        return ret

    p("finding files")
    dirs = ["."]
    while dirs:
        dirs += _check(dirs.pop(0))

    ret = [(f.startswith("./") and f[2:] or f) for f in (scripts + modules)]
    log.debug("Found files:\n%s", pprint.pformat(sorted(ret)))
    return ret


def distill_default_apps(options, files):
    """
    Try to determine the default app paths depending on the python
    version of the code we are inspecting

    :returns: (pylint bin name, pycodestyle bin name)
    """
    is_py2 = options.is_py2
    is_py3 = options.is_py3
    if not is_py2 and not is_py3:
        for f in files:
            if os.path.isdir(f):
                f = os.path.join(f, "__init__.py")
            line = open(f).readline()
            if not is_py2 and re.search("python2", line):
                p("Detected python2 env lines")
                is_py2 = True
            elif not is_py3 and re.search("python3", line):
                p("Detected python3 env lines")
                is_py3 = True
            elif not is_py2 and not is_py3 and re.search("python", line):
                p("Detected python env lines, assuming python2")
                is_py2 = True
        if is_py2 and is_py3:
            is_py3 = False

    if not is_py2 and not is_py3:
        # Default to py3 assumption
        p("No explicit py2 or py3 support found, so assume py3")
        is_py3 = True

    py2_pylint = py3_pylint = "pylint"
    py2_pycodestyle = py3_pycodestyle = "pycodestyle"
    if shutil.which("pylint-2"):
        py2_pylint = "pylint-2"
    if shutil.which("pylint-3"):
        py3_pylint = "pylint-3"
    if shutil.which("pycodestyle-2"):
        py2_pycodestyle = "pycodestyle-2"
    if shutil.which("pycodestyle-3"):
        py3_pycodestyle = "pycodestyle-3"

    pylint_ret = []
    pycode_ret = []
    if is_py2:
        pylint_ret.append(py2_pylint)
        pycode_ret.append(py2_pycodestyle)
    if is_py3:
        pylint_ret.append(py3_pylint)
        pycode_ret.append(py3_pycodestyle)

    return pylint_ret, pycode_ret


def parse_args():
    desc = ("Helper script to intelligently run pylint against all "
            "python code underneath the current directory")
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument("files", nargs="*",
            help="Manually specify the filelist, instead of searching.")
    parser.add_argument("-2", "--2", action="store_true", dest="is_py2",
            help="Skip auto detection, use python2")
    parser.add_argument("-3", "--3", action="store_true", dest="is_py3",
            help="Skip auto detection, use python3")
    parser.add_argument("--disable-pylint", action="store_true",
            help="Disable pylint checking")
    parser.add_argument("--disable-pycodestyle", action="store_true",
            help="Disable pycodestyle checking")
    parser.add_argument("-q", "--quiet", action="store_true",
            help="Don't print any informational messages")
    parser.add_argument("-d", "--debug", action="store_true",
            help="Print debugging output")

    options = parser.parse_args()
    return options


def main():
    options = parse_args()

    if options.quiet:
        global QUIET
        QUIET = True
    elif options.debug:
        log.setLevel(logging.DEBUG)

    files = options.files
    if not files:
        files = find_python_files()
    if not files:
        p("No python files detected!")
        return 1

    output_format = sys.stdout.isatty() and "colorized" or "text"
    pylint_cmds, pycodestyle_cmds = distill_default_apps(options, files)

    if not options.disable_pycodestyle:
        for pycodestyle in pycodestyle_cmds:
            p("running %s" % pycodestyle)
            cmd = "%s " % pycodestyle
            cmd += " ".join(files)
            log.debug("Full command: %s", cmd)
            os.system(cmd)

    if not options.disable_pylint:
        for pylint in pylint_cmds:
            p("running %s" % pylint)
            cmd = "%s " % pylint
            cmd += "--output-format=%s " % output_format
            print("WARN: Oct 2020: Forcing -j1 because pylint is busted")
            cmd += "-j1 "
            cmd += " ".join(files)
            log.debug("Full command: %s", cmd)
            os.system(cmd)


if __name__ == '__main__':
    sys.exit(main())
