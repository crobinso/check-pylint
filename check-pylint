#!/usr/bin/python
#
# This work is licensed under the terms of the GNU GPL, version 2 or later.
# See the COPYING file in the top-level directory.

import argparse
import os
import subprocess
import sys


def find_python_files():
    """
    Search under cwd for all python files
    """
    modules = []
    scripts = []

    print "finding files"
    skipdirs = ["./.git"]
    for root, dirs, files in os.walk("."):
        if root in modules:
            continue

        if root != "." and ".git" in dirs:
            # Don't descend into other git repos
            skipdirs.append(root)

        do_skip = False
        for skip in skipdirs:
            if root == skip or root.startswith(skip + "/"):
                do_skip = True
                break
        if do_skip:
            continue

        if "__init__.py" in files:
            modules.append(root)
            continue

        for filename in [os.path.join(root, f) for f in files]:
            if os.path.islink(filename):
                continue
            if "Python script" in subprocess.check_output(
                ["/usr/bin/file", filename]):
                scripts.append(filename)

    files = [(f.startswith("./") and f[2:] or f) for f in (scripts + modules)]
    return files


def parse_args():
    desc = ("Helper script to intelligently run pylint against all "
            "python code underneath the current directory")
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument("files", nargs="*",
            help="Manually specify the filelist, instead of searching.")

    options = parser.parse_args()
    return options


def main():
    options = parse_args()
    ignore = options

    files = options.files
    if not files:
        files = find_python_files()
    output_format = sys.stdout.isatty() and "colorized" or "text"

    print "running pycodestyle"
    cmd = "pycodestyle "
    cmd += " ".join(files)
    os.system(cmd)

    print "running pylint"
    cmd = "pylint "
    cmd += "--output-format=%s " % output_format
    cmd += " ".join(files)
    os.system(cmd)


if __name__ == '__main__':
    sys.exit(main())
